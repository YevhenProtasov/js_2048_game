{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/scripts/utils.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $6d45e21e2891194c$exports = {};\nfunction $6d45e21e2891194c$var$getCapitalizedWord(word) {\n    return word[0].toUpperCase() + word.slice(1);\n}\nfunction $6d45e21e2891194c$var$getRandomArrayIndex(arr) {\n    return Math.floor(Math.random() * arr.length);\n}\n$6d45e21e2891194c$exports = {\n    getCapitalizedWord: $6d45e21e2891194c$var$getCapitalizedWord,\n    getRandomArrayIndex: $6d45e21e2891194c$var$getRandomArrayIndex\n};\n\n\nvar $09e991522ca7e64e$require$getCapitalizedWord = $6d45e21e2891194c$exports.getCapitalizedWord;\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n\nvar $a5fd07fa01589658$require$getRandomArrayIndex = $6d45e21e2891194c$exports.getRandomArrayIndex;\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        // eslint-disable-next-line no-console\n        this.initialState = initialState;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        if (!this.canMoveLeft()) return;\n        if (this.status === \"playing\") {\n            this.move();\n            this.addTile();\n            this.isGameContinue();\n        }\n    }\n    moveRight() {\n        if (!this.canMoveRight()) return;\n        if (this.status === \"playing\") {\n            this.reverseBoard();\n            this.move();\n            this.reverseBoard();\n            this.addTile();\n            this.isGameContinue();\n        }\n    }\n    moveUp() {\n        if (!this.canMoveUp()) return;\n        if (this.status === \"playing\") {\n            this.transposeBoard();\n            this.move();\n            this.transposeBoard();\n            this.addTile();\n            this.isGameContinue();\n        }\n    }\n    moveDown() {\n        if (!this.canMoveDown()) return;\n        if (this.status === \"playing\") {\n            this.transposeBoard();\n            this.reverseBoard();\n            this.move();\n            this.reverseBoard();\n            this.transposeBoard();\n            this.addTile();\n            this.isGameContinue();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.addTile();\n        this.addTile();\n        this.status = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    // Add your own methods here\n    getEmptyCells() {\n        return this.state.reduce((emptyCells, row, rowIndex)=>{\n            row.forEach((item, colIndex)=>{\n                if (item === 0) emptyCells.push({\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            });\n            return emptyCells;\n        }, []);\n    }\n    addTile() {\n        const number = Math.random() <= 0.1 ? 4 : 2;\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length > 0) {\n            const emptyCellIndex = $a5fd07fa01589658$require$getRandomArrayIndex(emptyCells);\n            const { rowIndex: rowIndex, colIndex: colIndex } = emptyCells[emptyCellIndex];\n            this.state[rowIndex][colIndex] = number;\n        }\n    }\n    move() {\n        this.state = this.state.map((row)=>row.filter((v)=>v !== 0));\n        this.state.forEach((newRow)=>{\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                this.score += newRow[i] * 2;\n                newRow[i] += newRow[i + 1];\n                newRow[i + 1] = 0;\n                i++;\n                continue;\n            }\n        });\n        this.state = this.state.map((row)=>row.filter((v)=>v !== 0));\n        this.state.forEach((row)=>{\n            while(row.length < 4)row.push(0);\n        });\n    }\n    isBoardHas2048() {\n        return this.state.some((row)=>row.includes(2048));\n    }\n    reverseBoard() {\n        this.state = this.state.map((row)=>row.reverse());\n    }\n    transposeBoard() {\n        this.state = this.state[0].map((_, colI)=>{\n            return this.state.map((row)=>row[colI]);\n        });\n    }\n    canMoveLeft() {\n        return this.state.some((row)=>{\n            const rowWithValues = row.filter((item)=>item !== 0);\n            if (rowWithValues.length === 0) return false;\n            for(let i = 0; i < rowWithValues.length; i++){\n                if (rowWithValues[i] === rowWithValues[i + 1]) return true;\n                if (row.indexOf(rowWithValues[i]) !== rowWithValues.indexOf(rowWithValues[i])) return true;\n            }\n        });\n    }\n    canMoveRight() {\n        this.reverseBoard();\n        const permission = this.canMoveLeft();\n        this.reverseBoard();\n        return permission;\n    }\n    canMoveUp() {\n        this.transposeBoard();\n        const permission = this.canMoveLeft();\n        this.transposeBoard();\n        return permission;\n    }\n    canMoveDown() {\n        this.transposeBoard();\n        this.reverseBoard();\n        const permission = this.canMoveLeft();\n        this.reverseBoard();\n        this.transposeBoard();\n        return permission;\n    }\n    canMove() {\n        return this.canMoveLeft() || this.canMoveRight() || this.canMoveUp() || this.canMoveDown();\n    }\n    isGameContinue() {\n        if (this.isBoardHas2048()) {\n            this.status = \"win\";\n            return false;\n        }\n        if (!this.canMove()) {\n            this.status = \"lose\";\n            return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$tbody = document.querySelector(\"tbody\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    const onClickClasses = $09e991522ca7e64e$var$button.className.split(\" \");\n    if (onClickClasses[1] === \"start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$manageMessage();\n    }\n    if (onClickClasses[1] === \"restart\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$manageMessage();\n    }\n    $09e991522ca7e64e$var$changeField();\n    $09e991522ca7e64e$var$button.classList.toggle(\"start\");\n    $09e991522ca7e64e$var$button.classList.toggle(\"restart\");\n    const afterClickClasses = $09e991522ca7e64e$var$button.className.split(\" \");\n    $09e991522ca7e64e$var$button.textContent = $09e991522ca7e64e$require$getCapitalizedWord(afterClickClasses[1]);\n});\nconst $09e991522ca7e64e$var$moveKeys = [\n    \"ArrowRight\",\n    \"ArrowLeft\",\n    \"ArrowUp\",\n    \"ArrowDown\"\n];\ndocument.addEventListener(\"keydown\", (e)=>{\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus !== \"playing\") return;\n    if (e.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    if (e.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    if (e.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    if (e.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n    if ($09e991522ca7e64e$var$moveKeys.includes(e.key)) {\n        $09e991522ca7e64e$var$changeField();\n        $09e991522ca7e64e$var$manageMessage();\n    }\n});\nfunction $09e991522ca7e64e$var$changeField() {\n    const currState = $09e991522ca7e64e$var$game.getState();\n    currState.forEach((line, index)=>{\n        const tr = document.createElement(\"tr\");\n        tr.classList.add(\"field-row\");\n        line.forEach((item)=>{\n            const td = document.createElement(\"td\");\n            td.classList.add(\"field-cell\");\n            if (item) td.classList.add(`field-cell--${item}`);\n            td.textContent = item || \"\";\n            tr.appendChild(td);\n        });\n        $09e991522ca7e64e$var$tbody.replaceChild(tr, $09e991522ca7e64e$var$tbody.rows[index]);\n    });\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$manageMessage() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    switch(gameStatus){\n        case \"idle\":\n            $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n            break;\n        case \"playing\":\n            $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n            break;\n        case \"win\":\n            $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n            break;\n        default:\n            break;\n    }\n}\n\n\n//# sourceMappingURL=index.51c7577f.js.map\n","'use strict';\n\n// const initialState = [\n//   [0, 0, 0, 0],\n//   [0, 0, 0, 0],\n//   [0, 0, 0, 0],\n//   [0, 0, 0, 0],\n// ];\n\nconst { getCapitalizedWord } = require('./utils');\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\n\nconst button = document.querySelector('.button');\nconst tbody = document.querySelector('tbody');\nconst score = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', () => {\n  const onClickClasses = button.className.split(' ');\n\n  if (onClickClasses[1] === 'start') {\n    game.start();\n\n    manageMessage();\n  }\n\n  if (onClickClasses[1] === 'restart') {\n    game.restart();\n\n    manageMessage();\n  }\n\n  changeField();\n\n  button.classList.toggle('start');\n  button.classList.toggle('restart');\n\n  const afterClickClasses = button.className.split(' ');\n\n  button.textContent = getCapitalizedWord(afterClickClasses[1]);\n});\n\nconst moveKeys = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'];\n\ndocument.addEventListener('keydown', (e) => {\n  const gameStatus = game.getStatus();\n\n  if (gameStatus !== 'playing') {\n    return;\n  }\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  if (moveKeys.includes(e.key)) {\n    changeField();\n    manageMessage();\n  }\n});\n\nfunction changeField() {\n  const currState = game.getState();\n\n  currState.forEach((line, index) => {\n    const tr = document.createElement('tr');\n\n    tr.classList.add('field-row');\n\n    line.forEach((item) => {\n      const td = document.createElement('td');\n\n      td.classList.add('field-cell');\n\n      if (item) {\n        td.classList.add(`field-cell--${item}`);\n      }\n\n      td.textContent = item || '';\n\n      tr.appendChild(td);\n    });\n\n    tbody.replaceChild(tr, tbody.rows[index]);\n  });\n\n  score.textContent = game.getScore();\n}\n\nfunction manageMessage() {\n  const gameStatus = game.getStatus();\n\n  switch (gameStatus) {\n    case 'idle':\n      startMessage.classList.remove('hidden');\n\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n\n      break;\n\n    case 'playing':\n      startMessage.classList.add('hidden');\n      break;\n\n    case 'win':\n      winMessage.classList.remove('hidden');\n      break;\n\n    case 'lose':\n      loseMessage.classList.remove('hidden');\n      break;\n\n    default:\n      break;\n  }\n}\n","function getCapitalizedWord(word) {\n  return word[0].toUpperCase() + word.slice(1);\n}\n\nfunction getRandomArrayIndex(arr) {\n  return Math.floor(Math.random() * arr.length);\n}\n\nmodule.exports = {\n  getCapitalizedWord,\n  getRandomArrayIndex,\n};\n","'use strict';\n\nconst { getRandomArrayIndex } = require('../scripts/utils');\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    this.initialState = initialState;\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (!this.canMoveLeft()) {\n      return;\n    }\n\n    if (this.status === 'playing') {\n      this.move();\n\n      this.addTile();\n      this.isGameContinue();\n    }\n  }\n\n  moveRight() {\n    if (!this.canMoveRight()) {\n      return;\n    }\n\n    if (this.status === 'playing') {\n      this.reverseBoard();\n      this.move();\n      this.reverseBoard();\n\n      this.addTile();\n      this.isGameContinue();\n    }\n  }\n\n  moveUp() {\n    if (!this.canMoveUp()) {\n      return;\n    }\n\n    if (this.status === 'playing') {\n      this.transposeBoard();\n      this.move();\n      this.transposeBoard();\n\n      this.addTile();\n      this.isGameContinue();\n    }\n  }\n\n  moveDown() {\n    if (!this.canMoveDown()) {\n      return;\n    }\n\n    if (this.status === 'playing') {\n      this.transposeBoard();\n      this.reverseBoard();\n      this.move();\n      this.reverseBoard();\n      this.transposeBoard();\n\n      this.addTile();\n      this.isGameContinue();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.addTile();\n    this.addTile();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Add your own methods here\n  getEmptyCells() {\n    return this.state.reduce((emptyCells, row, rowIndex) => {\n      row.forEach((item, colIndex) => {\n        if (item === 0) {\n          emptyCells.push({ rowIndex, colIndex });\n        }\n      });\n\n      return emptyCells;\n    }, []);\n  }\n\n  addTile() {\n    const number = Math.random() <= 0.1 ? 4 : 2;\n\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length > 0) {\n      const emptyCellIndex = getRandomArrayIndex(emptyCells);\n\n      const { rowIndex, colIndex } = emptyCells[emptyCellIndex];\n\n      this.state[rowIndex][colIndex] = number;\n    }\n  }\n\n  move() {\n    this.state = this.state.map((row) => row.filter((v) => v !== 0));\n\n    this.state.forEach((newRow) => {\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          this.score += newRow[i] * 2;\n          newRow[i] += newRow[i + 1];\n          newRow[i + 1] = 0;\n          i++;\n          continue;\n        }\n      }\n    });\n\n    this.state = this.state.map((row) => row.filter((v) => v !== 0));\n\n    this.state.forEach((row) => {\n      while (row.length < 4) {\n        row.push(0);\n      }\n    });\n  }\n\n  isBoardHas2048() {\n    return this.state.some((row) => row.includes(2048));\n  }\n\n  reverseBoard() {\n    this.state = this.state.map((row) => row.reverse());\n  }\n\n  transposeBoard() {\n    this.state = this.state[0].map((_, colI) => {\n      return this.state.map((row) => row[colI]);\n    });\n  }\n\n  canMoveLeft() {\n    return this.state.some((row) => {\n      const rowWithValues = row.filter((item) => item !== 0);\n\n      if (rowWithValues.length === 0) {\n        return false;\n      }\n\n      for (let i = 0; i < rowWithValues.length; i++) {\n        if (rowWithValues[i] === rowWithValues[i + 1]) {\n          return true;\n        }\n\n        if (\n          row.indexOf(rowWithValues[i]) !==\n          rowWithValues.indexOf(rowWithValues[i])\n        ) {\n          return true;\n        }\n      }\n    });\n  }\n\n  canMoveRight() {\n    this.reverseBoard();\n\n    const permission = this.canMoveLeft();\n\n    this.reverseBoard();\n\n    return permission;\n  }\n\n  canMoveUp() {\n    this.transposeBoard();\n\n    const permission = this.canMoveLeft();\n\n    this.transposeBoard();\n\n    return permission;\n  }\n\n  canMoveDown() {\n    this.transposeBoard();\n    this.reverseBoard();\n\n    const permission = this.canMoveLeft();\n\n    this.reverseBoard();\n    this.transposeBoard();\n\n    return permission;\n  }\n\n  canMove() {\n    return (\n      this.canMoveLeft() ||\n      this.canMoveRight() ||\n      this.canMoveUp() ||\n      this.canMoveDown()\n    );\n  }\n\n  isGameContinue() {\n    if (this.isBoardHas2048()) {\n      this.status = 'win';\n\n      return false;\n    }\n\n    if (!this.canMove()) {\n      this.status = 'lose';\n\n      return false;\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$6d45e21e2891194c$exports","$09e991522ca7e64e$require$getCapitalizedWord","getCapitalizedWord","word","toUpperCase","slice","getRandomArrayIndex","arr","Math","floor","random","length","$a5fd07fa01589658$require$getRandomArrayIndex","$09e991522ca7e64e$var$game","constructor","initialState","state","map","row","score","status","moveLeft","canMoveLeft","move","addTile","isGameContinue","moveRight","canMoveRight","reverseBoard","moveUp","canMoveUp","transposeBoard","moveDown","canMoveDown","getScore","getState","getStatus","start","restart","getEmptyCells","reduce","emptyCells","rowIndex","forEach","item","colIndex","push","emptyCellIndex","filter","v","newRow","i","isBoardHas2048","some","includes","reverse","_","colI","rowWithValues","indexOf","permission","canMove","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$tbody","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","addEventListener","onClickClasses","className","split","$09e991522ca7e64e$var$manageMessage","$09e991522ca7e64e$var$changeField","classList","toggle","afterClickClasses","textContent","$09e991522ca7e64e$var$moveKeys","currState","line","index","tr","createElement","add","td","appendChild","replaceChild","rows","remove","e","key"],"version":3,"file":"index.51c7577f.js.map"}